<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1557px" preserveAspectRatio="none" style="width:1069px;height:1557px;background:#FFFFFF;" version="1.1" viewBox="0 0 1069 1557" width="1069px" zoomAndPan="magnify"><defs><filter height="300%" id="f4mxz67s9uscn" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[024a4be2f32788af73fe118ab15401eb]
class PortsCentralityUI--><rect codeLine="3" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="48" id="PortsCentralityUI" style="stroke:#A80036;stroke-width:1.5;" width="124" x="292.5" y="7"/><ellipse cx="307.5" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M309.5,19.5 Q309.7031,19 309.9375,18.75 Q310.1719,18.5 310.4375,18.5 Q310.9063,18.5 311.2031,18.7813 Q311.5,19.0625 311.5,19.7188 L311.5,21.2813 Q311.5,21.9375 311.2188,22.2188 Q310.9375,22.5 310.5,22.5 Q310.1094,22.5 309.8594,22.3281 Q309.6094,22.1563 309.5,21.7031 Q309.4531,21.3906 309.2813,21.2188 Q308.9688,20.8906 308.4063,20.7031 Q307.8438,20.5 307.2813,20.5 Q306.5781,20.5 305.9844,20.7813 Q305.4063,21.0625 304.9531,21.6875 Q304.5,22.3125 304.5,23.1719 L304.5,24.0938 Q304.5,25.125 305.3438,25.8125 Q306.1875,26.5 307.6875,26.5 Q308.5781,26.5 309.2031,26.2969 Q309.5625,26.1875 309.9688,25.8281 Q310.2344,25.625 310.375,25.5625 Q310.5156,25.5 310.6875,25.5 Q311.0156,25.5 311.25,25.7656 Q311.5,26.0156 311.5,26.375 Q311.5,26.7188 311.1563,27.125 Q310.6563,27.7188 309.8594,28.0469 Q308.8125,28.5 307.5313,28.5 Q306.0313,28.5 304.8281,27.9063 Q303.8594,27.4375 303.1719,26.4219 Q302.5,25.4063 302.5,24.2031 L302.5,23.1094 Q302.5,21.8594 303.0938,20.7656 Q303.7031,19.6719 304.75,19.0938 Q305.8125,18.5 307,18.5 Q307.7188,18.5 308.3438,18.75 Q308.9688,19 309.5,19.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="92" x="321.5" y="27.9102">PortsCentralityUI</text><line style="stroke:#A80036;stroke-width:1.5;" x1="293.5" x2="415.5" y1="39" y2="39"/><line style="stroke:#A80036;stroke-width:1.5;" x1="293.5" x2="415.5" y1="47" y2="47"/><!--MD5=[d6948be13e242ed41ae5c7ce6f8941eb]
class FreightNetworkStore--><rect codeLine="7" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="131.0156" id="FreightNetworkStore" style="stroke:#A80036;stroke-width:1.5;" width="219" x="76" y="567"/><ellipse cx="125.25" cy="583" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M127.25,579.5 Q127.4531,579 127.6875,578.75 Q127.9219,578.5 128.1875,578.5 Q128.6563,578.5 128.9531,578.7813 Q129.25,579.0625 129.25,579.7188 L129.25,581.2813 Q129.25,581.9375 128.9688,582.2188 Q128.6875,582.5 128.25,582.5 Q127.8594,582.5 127.6094,582.3281 Q127.3594,582.1563 127.25,581.7031 Q127.2031,581.3906 127.0313,581.2188 Q126.7188,580.8906 126.1563,580.7031 Q125.5938,580.5 125.0313,580.5 Q124.3281,580.5 123.7344,580.7813 Q123.1563,581.0625 122.7031,581.6875 Q122.25,582.3125 122.25,583.1719 L122.25,584.0938 Q122.25,585.125 123.0938,585.8125 Q123.9375,586.5 125.4375,586.5 Q126.3281,586.5 126.9531,586.2969 Q127.3125,586.1875 127.7188,585.8281 Q127.9844,585.625 128.125,585.5625 Q128.2656,585.5 128.4375,585.5 Q128.7656,585.5 129,585.7656 Q129.25,586.0156 129.25,586.375 Q129.25,586.7188 128.9063,587.125 Q128.4063,587.7188 127.6094,588.0469 Q126.5625,588.5 125.2813,588.5 Q123.7813,588.5 122.5781,587.9063 Q121.6094,587.4375 120.9219,586.4219 Q120.25,585.4063 120.25,584.2031 L120.25,583.1094 Q120.25,581.8594 120.8438,580.7656 Q121.4531,579.6719 122.5,579.0938 Q123.5625,578.5 124.75,578.5 Q125.4688,578.5 126.0938,578.75 Q126.7188,579 127.25,579.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="112" x="145.75" y="587.9102">FreightNetworkStore</text><line style="stroke:#A80036;stroke-width:1.5;" x1="77" x2="294" y1="599" y2="599"/><ellipse cx="87" cy="610" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="12" x="96" y="614.4189">ab</text><ellipse cx="87" cy="623.8359" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="14" x="96" y="628.2549">mg</text><line style="stroke:#A80036;stroke-width:1.5;" x1="77" x2="294" y1="634.6719" y2="634.6719"/><ellipse cx="87" cy="645.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="193" x="96" y="650.0908">setAb(MatrixGraph&lt;Object, Double&gt; ab)</text><ellipse cx="87" cy="659.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="186" x="96" y="663.9268">setMg(MapGraph&lt;Object, Double&gt; mg)</text><ellipse cx="87" cy="673.3438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="37" x="96" y="677.7627">getMg()</text><ellipse cx="87" cy="687.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="37" x="96" y="691.5986">getAb()</text><!--MD5=[b254f1cc02043f4bb14dc9b2650828fc]
class BetweennessCentrality--><rect codeLine="17" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="103.3438" id="BetweennessCentrality" style="stroke:#A80036;stroke-width:1.5;" width="357" x="7" y="199"/><ellipse cx="117.75" cy="215" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M119.75,211.5 Q119.9531,211 120.1875,210.75 Q120.4219,210.5 120.6875,210.5 Q121.1563,210.5 121.4531,210.7813 Q121.75,211.0625 121.75,211.7188 L121.75,213.2813 Q121.75,213.9375 121.4688,214.2188 Q121.1875,214.5 120.75,214.5 Q120.3594,214.5 120.1094,214.3281 Q119.8594,214.1563 119.75,213.7031 Q119.7031,213.3906 119.5313,213.2188 Q119.2188,212.8906 118.6563,212.7031 Q118.0938,212.5 117.5313,212.5 Q116.8281,212.5 116.2344,212.7813 Q115.6563,213.0625 115.2031,213.6875 Q114.75,214.3125 114.75,215.1719 L114.75,216.0938 Q114.75,217.125 115.5938,217.8125 Q116.4375,218.5 117.9375,218.5 Q118.8281,218.5 119.4531,218.2969 Q119.8125,218.1875 120.2188,217.8281 Q120.4844,217.625 120.625,217.5625 Q120.7656,217.5 120.9375,217.5 Q121.2656,217.5 121.5,217.7656 Q121.75,218.0156 121.75,218.375 Q121.75,218.7188 121.4063,219.125 Q120.9063,219.7188 120.1094,220.0469 Q119.0625,220.5 117.7813,220.5 Q116.2813,220.5 115.0781,219.9063 Q114.1094,219.4375 113.4219,218.4219 Q112.75,217.4063 112.75,216.2031 L112.75,215.1094 Q112.75,213.8594 113.3438,212.7656 Q113.9531,211.6719 115,211.0938 Q116.0625,210.5 117.25,210.5 Q117.9688,210.5 118.5938,210.75 Q119.2188,211 119.75,211.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="127" x="138.25" y="219.9102">BetweennessCentrality</text><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="363" y1="231" y2="231"/><line style="stroke:#A80036;stroke-width:1.5;" x1="8" x2="363" y1="239" y2="239"/><ellipse cx="18" cy="250" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="121" x="27" y="254.4189">BetweennessCentrality()</text><ellipse cx="18" cy="263.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="182" x="27" y="268.2549">computeBetweennessCentrality(int n)</text><ellipse cx="18" cy="277.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="183" x="27" y="282.0908">getAllPathsBetweenness(Object vert)</text><ellipse cx="18" cy="291.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="331" x="27" y="295.9268">checkListsEquals(LinkedList&lt;Object&gt; l1, List&lt;LinkedList&lt;Object&gt;&gt; l2)</text><!--MD5=[706e73df52f3df32f52be1ce9adb217e]
class Graph--><rect codeLine="26" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="338.5547" id="Graph" style="stroke:#A80036;stroke-width:1.5;" width="161" x="647" y="463"/><ellipse cx="706.25" cy="479" fill="#B4A7E5" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M707.25,476 L707.25,482 L709.25,482 L709.7344,482 L710.25,482.625 L710.25,483 L710.25,483.375 L709.7344,484 L709.25,484 L703.25,484 L702.7656,484 L702.25,483.375 L702.25,483 L702.25,482.625 L702.7656,482 L703.25,482 L705.25,482 L705.25,476 L703.25,476 L702.7656,476 L702.25,475.375 L702.25,475 L702.25,474.625 L702.7656,474 L703.25,474 L709.25,474 L709.7344,474 L710.25,474.625 L710.25,475 L710.25,475.375 L709.7344,476 L709.25,476 L707.25,476 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="34" x="726.75" y="483.9102">Graph</text><line style="stroke:#A80036;stroke-width:1.5;" x1="648" x2="807" y1="495" y2="495"/><line style="stroke:#A80036;stroke-width:1.5;" x1="648" x2="807" y1="503" y2="503"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="56" x="653" y="518.4189">isDirected()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="69" x="653" y="532.2549">numVertices()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="47" x="653" y="546.0908">vertices()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="82" x="653" y="559.9268">validVertex(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="44" x="653" y="573.7627">key(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="56" x="653" y="587.5986">vertex(key)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="45" x="653" y="601.4346">vertex(p)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="82" x="653" y="615.2705">adjVertices(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="58" x="653" y="629.1064">numEdges()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="38" x="653" y="642.9424">edges()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="92" x="653" y="656.7783">edge(vOrig, vDest)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="130" x="653" y="670.6143">edge(vOrigKey, vDestKey)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="77" x="653" y="684.4502">outDegree(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="70" x="653" y="698.2861">inDegree(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="98" x="653" y="712.1221">outgoingEdges(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="99" x="653" y="725.958">incomingEdges(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="119" x="653" y="739.7939">boolean addVertex(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="149" x="653" y="753.6299">addEdge(vOrig, vDest, weight)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="96" x="653" y="767.4658">removeVertex(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="128" x="653" y="781.3018">removeEdge(vOrig, vDest)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="34" x="653" y="795.1377">clone()</text><!--MD5=[bc4d72eb6311fa75f72dcf1fe1932b09]
class MapVertex--><rect codeLine="50" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="255.5391" id="MapVertex" style="stroke:#A80036;stroke-width:1.5;" width="144" x="459.5" y="1288"/><ellipse cx="499.7" cy="1304" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M501.7,1300.5 Q501.9031,1300 502.1375,1299.75 Q502.3719,1299.5 502.6375,1299.5 Q503.1063,1299.5 503.4031,1299.7813 Q503.7,1300.0625 503.7,1300.7188 L503.7,1302.2813 Q503.7,1302.9375 503.4188,1303.2188 Q503.1375,1303.5 502.7,1303.5 Q502.3094,1303.5 502.0594,1303.3281 Q501.8094,1303.1563 501.7,1302.7031 Q501.6531,1302.3906 501.4813,1302.2188 Q501.1688,1301.8906 500.6063,1301.7031 Q500.0438,1301.5 499.4813,1301.5 Q498.7781,1301.5 498.1844,1301.7813 Q497.6063,1302.0625 497.1531,1302.6875 Q496.7,1303.3125 496.7,1304.1719 L496.7,1305.0938 Q496.7,1306.125 497.5438,1306.8125 Q498.3875,1307.5 499.8875,1307.5 Q500.7781,1307.5 501.4031,1307.2969 Q501.7625,1307.1875 502.1688,1306.8281 Q502.4344,1306.625 502.575,1306.5625 Q502.7156,1306.5 502.8875,1306.5 Q503.2156,1306.5 503.45,1306.7656 Q503.7,1307.0156 503.7,1307.375 Q503.7,1307.7188 503.3563,1308.125 Q502.8563,1308.7188 502.0594,1309.0469 Q501.0125,1309.5 499.7313,1309.5 Q498.2313,1309.5 497.0281,1308.9063 Q496.0594,1308.4375 495.3719,1307.4219 Q494.7,1306.4063 494.7,1305.2031 L494.7,1304.1094 Q494.7,1302.8594 495.2938,1301.7656 Q495.9031,1300.6719 496.95,1300.0938 Q498.0125,1299.5 499.2,1299.5 Q499.9188,1299.5 500.5438,1299.75 Q501.1688,1300 501.7,1300.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="56" x="519.3" y="1308.9102">MapVertex</text><line style="stroke:#A80036;stroke-width:1.5;" x1="460.5" x2="602.5" y1="1320" y2="1320"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="467.5" y="1328"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="40" x="479.5" y="1335.4189">element;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="467.5" y="1341.8359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="45" x="479.5" y="1349.2549">outVerts;</text><line style="stroke:#A80036;stroke-width:1.5;" x1="460.5" x2="602.5" y1="1355.6719" y2="1355.6719"/><ellipse cx="470.5" cy="1366.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="80" x="479.5" y="1371.0908">MapVertex(vert)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="0" x="482.5" y="1384.9268"/><ellipse cx="470.5" cy="1394.3438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="60" x="479.5" y="1398.7627">getElement()</text><ellipse cx="470.5" cy="1408.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="118" x="479.5" y="1412.5986">addAdjVert(vAdj,  edge)</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="0" x="482.5" y="1426.4346"/><ellipse cx="470.5" cy="1435.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="85" x="479.5" y="1440.2705">remAdjVert(vAdj)</text><ellipse cx="470.5" cy="1449.6875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="69" x="479.5" y="1454.1064">getEdge(vAdj)</text><ellipse cx="470.5" cy="1463.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="71" x="479.5" y="1467.9424">numAdjVerts()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="0" x="482.5" y="1481.7783"/><ellipse cx="470.5" cy="1491.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="78" x="479.5" y="1495.6143">getAllAdjVerts()</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="0" x="482.5" y="1509.4502"/><ellipse cx="470.5" cy="1518.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="82" x="479.5" y="1523.2861">getAllOutEdges()</text><ellipse cx="470.5" cy="1532.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="45" x="479.5" y="1537.1221">toString()</text><!--MD5=[b122bab300f80f5d31a622e2bae54847]
class MapGraph--><rect codeLine="70" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="310.8828" id="MapGraph" style="stroke:#A80036;stroke-width:1.5;" width="206" x="428.5" y="883.5"/><ellipse cx="498.75" cy="899.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M500.75,896 Q500.9531,895.5 501.1875,895.25 Q501.4219,895 501.6875,895 Q502.1563,895 502.4531,895.2813 Q502.75,895.5625 502.75,896.2188 L502.75,897.7813 Q502.75,898.4375 502.4688,898.7188 Q502.1875,899 501.75,899 Q501.3594,899 501.1094,898.8281 Q500.8594,898.6563 500.75,898.2031 Q500.7031,897.8906 500.5313,897.7188 Q500.2188,897.3906 499.6563,897.2031 Q499.0938,897 498.5313,897 Q497.8281,897 497.2344,897.2813 Q496.6563,897.5625 496.2031,898.1875 Q495.75,898.8125 495.75,899.6719 L495.75,900.5938 Q495.75,901.625 496.5938,902.3125 Q497.4375,903 498.9375,903 Q499.8281,903 500.4531,902.7969 Q500.8125,902.6875 501.2188,902.3281 Q501.4844,902.125 501.625,902.0625 Q501.7656,902 501.9375,902 Q502.2656,902 502.5,902.2656 Q502.75,902.5156 502.75,902.875 Q502.75,903.2188 502.4063,903.625 Q501.9063,904.2188 501.1094,904.5469 Q500.0625,905 498.7813,905 Q497.2813,905 496.0781,904.4063 Q495.1094,903.9375 494.4219,902.9219 Q493.75,901.9063 493.75,900.7031 L493.75,899.6094 Q493.75,898.3594 494.3438,897.2656 Q494.9531,896.1719 496,895.5938 Q497.0625,895 498.25,895 Q498.9688,895 499.5938,895.25 Q500.2188,895.5 500.75,896 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="57" x="519.25" y="904.4102">MapGraph</text><line style="stroke:#A80036;stroke-width:1.5;" x1="429.5" x2="633.5" y1="915.5" y2="915.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="436.5" y="923.5"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="24" x="448.5" y="930.9189">error</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="436.5" y="937.3359"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="61" x="448.5" y="944.7549">mapVertices</text><line style="stroke:#A80036;stroke-width:1.5;" x1="429.5" x2="633.5" y1="951.1719" y2="951.1719"/><ellipse cx="439.5" cy="962.1719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="138" x="448.5" y="966.5908">MapGraph(boolean directed)</text><ellipse cx="439.5" cy="976.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="126" x="448.5" y="980.4268">MapGraph(Graph&lt;V,E&gt; g)</text><ellipse cx="439.5" cy="989.8438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="93" x="448.5" y="994.2627">validVertex(V vert)</text><ellipse cx="439.5" cy="1003.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="93" x="448.5" y="1008.0986">adjVertices(V vert)</text><ellipse cx="439.5" cy="1017.5156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="38" x="448.5" y="1021.9346">edges()</text><ellipse cx="439.5" cy="1031.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="448.5" y="1035.7705">edge(V vOrig, V vDest)</text><ellipse cx="439.5" cy="1045.1875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="158" x="448.5" y="1049.6064">edge(int vOrigKey, int vDestKey)</text><ellipse cx="439.5" cy="1059.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="88" x="448.5" y="1063.4424">outDegree(V vert)</text><ellipse cx="439.5" cy="1072.8594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="81" x="448.5" y="1077.2783">inDegree(V vert)</text><ellipse cx="439.5" cy="1086.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="109" x="448.5" y="1091.1143">outgoingEdges(V vert)</text><ellipse cx="439.5" cy="1100.5313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="110" x="448.5" y="1104.9502">incomingEdges(V vert)</text><ellipse cx="439.5" cy="1114.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="89" x="448.5" y="1118.7861">addVertex(V vert)</text><ellipse cx="439.5" cy="1128.2031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="448.5" y="1132.6221">addEdge(V vOrig, V vDest, E weight)</text><ellipse cx="439.5" cy="1142.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="107" x="448.5" y="1146.458">removeVertex(V vert)</text><ellipse cx="439.5" cy="1155.875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="150" x="448.5" y="1160.2939">removeEdge(V vOrig, V vDest)</text><ellipse cx="439.5" cy="1169.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="34" x="448.5" y="1174.1299">clone()</text><ellipse cx="439.5" cy="1183.5469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="45" x="448.5" y="1187.9658">toString()</text><!--MD5=[b7b072196a724e538165319251b4d539]
class MatrixGraph--><rect codeLine="92" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="352.3906" id="MatrixGraph" style="stroke:#A80036;stroke-width:1.5;" width="272" x="669.5" y="863"/><ellipse cx="768.75" cy="879" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M770.75,875.5 Q770.9531,875 771.1875,874.75 Q771.4219,874.5 771.6875,874.5 Q772.1563,874.5 772.4531,874.7813 Q772.75,875.0625 772.75,875.7188 L772.75,877.2813 Q772.75,877.9375 772.4688,878.2188 Q772.1875,878.5 771.75,878.5 Q771.3594,878.5 771.1094,878.3281 Q770.8594,878.1563 770.75,877.7031 Q770.7031,877.3906 770.5313,877.2188 Q770.2188,876.8906 769.6563,876.7031 Q769.0938,876.5 768.5313,876.5 Q767.8281,876.5 767.2344,876.7813 Q766.6563,877.0625 766.2031,877.6875 Q765.75,878.3125 765.75,879.1719 L765.75,880.0938 Q765.75,881.125 766.5938,881.8125 Q767.4375,882.5 768.9375,882.5 Q769.8281,882.5 770.4531,882.2969 Q770.8125,882.1875 771.2188,881.8281 Q771.4844,881.625 771.625,881.5625 Q771.7656,881.5 771.9375,881.5 Q772.2656,881.5 772.5,881.7656 Q772.75,882.0156 772.75,882.375 Q772.75,882.7188 772.4063,883.125 Q771.9063,883.7188 771.1094,884.0469 Q770.0625,884.5 768.7813,884.5 Q767.2813,884.5 766.0781,883.9063 Q765.1094,883.4375 764.4219,882.4219 Q763.75,881.4063 763.75,880.2031 L763.75,879.1094 Q763.75,877.8594 764.3438,876.7656 Q764.9531,875.6719 766,875.0938 Q767.0625,874.5 768.25,874.5 Q768.9688,874.5 769.5938,874.75 Q770.2188,875 770.75,875.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="65" x="789.25" y="883.9102">MatrixGraph</text><line style="stroke:#A80036;stroke-width:1.5;" x1="670.5" x2="940.5" y1="895" y2="895"/><ellipse cx="680.5" cy="906" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="91" x="689.5" y="910.4189">INITIAL_CAPACITY</text><ellipse cx="680.5" cy="919.8359" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;fill:none;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="83" x="689.5" y="924.2549">RESIZE_FACTOR</text><line style="stroke:#A80036;stroke-width:1.5;" x1="670.5" x2="940.5" y1="930.6719" y2="930.6719"/><ellipse cx="680.5" cy="941.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="232" x="689.5" y="946.0908">MatrixGraph(boolean directed, int initialCapacity)</text><ellipse cx="680.5" cy="955.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="147" x="689.5" y="959.9268">MatrixGraph(boolean directed)</text><ellipse cx="680.5" cy="969.3438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="135" x="689.5" y="973.7627">MatrixGraph(Graph&lt;V,E&gt; g)</text><ellipse cx="680.5" cy="983.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="246" x="689.5" y="987.5986">MatrixGraph(boolean directed, List &lt;V&gt; vs, E [][] m)</text><ellipse cx="680.5" cy="997.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="93" x="689.5" y="1001.4346">adjVertices(V vert)</text><ellipse cx="680.5" cy="1010.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="38" x="689.5" y="1015.2705">edges()</text><ellipse cx="680.5" cy="1024.6875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="114" x="689.5" y="1029.1064">edge(V vOrig, V vDest)</text><ellipse cx="680.5" cy="1038.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="158" x="689.5" y="1042.9424">edge(int vOrigKey, int vDestKey)</text><ellipse cx="680.5" cy="1052.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="88" x="689.5" y="1056.7783">outDegree(V vert)</text><ellipse cx="680.5" cy="1066.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="81" x="689.5" y="1070.6143">inDegree(V vert)</text><ellipse cx="680.5" cy="1080.0313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="109" x="689.5" y="1084.4502">outgoingEdges(V vert)</text><ellipse cx="680.5" cy="1093.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="110" x="689.5" y="1098.2861">incomingEdges(V vert)</text><ellipse cx="680.5" cy="1107.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="89" x="689.5" y="1112.1221">addVertex(V vert)</text><ellipse cx="680.5" cy="1121.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="67" x="689.5" y="1125.958">resizeMatrix()</text><ellipse cx="680.5" cy="1135.375" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="689.5" y="1139.7939">addEdge(V vOrig, V vDest, E weight)</text><ellipse cx="680.5" cy="1149.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="107" x="689.5" y="1153.6299">removeVertex(V vert)</text><ellipse cx="680.5" cy="1163.0469" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="194" x="689.5" y="1167.4658">removeEdge(int vOrigKey, int vDestKey)</text><ellipse cx="680.5" cy="1176.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="150" x="689.5" y="1181.3018">removeEdge(V vOrig, V vDest)</text><ellipse cx="680.5" cy="1190.7188" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="34" x="689.5" y="1195.1377">clone()</text><ellipse cx="680.5" cy="1204.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="45" x="689.5" y="1208.9736">toString()</text><!--MD5=[4533588fb66c6fa31a6e04bf29ae6161]
class Algorithms--><rect codeLine="117" fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="269.375" id="Algorithms" style="stroke:#A80036;stroke-width:1.5;" width="656" x="399.5" y="116"/><ellipse cx="693.75" cy="132" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M695.75,128.5 Q695.9531,128 696.1875,127.75 Q696.4219,127.5 696.6875,127.5 Q697.1563,127.5 697.4531,127.7813 Q697.75,128.0625 697.75,128.7188 L697.75,130.2813 Q697.75,130.9375 697.4688,131.2188 Q697.1875,131.5 696.75,131.5 Q696.3594,131.5 696.1094,131.3281 Q695.8594,131.1563 695.75,130.7031 Q695.7031,130.3906 695.5313,130.2188 Q695.2188,129.8906 694.6563,129.7031 Q694.0938,129.5 693.5313,129.5 Q692.8281,129.5 692.2344,129.7813 Q691.6563,130.0625 691.2031,130.6875 Q690.75,131.3125 690.75,132.1719 L690.75,133.0938 Q690.75,134.125 691.5938,134.8125 Q692.4375,135.5 693.9375,135.5 Q694.8281,135.5 695.4531,135.2969 Q695.8125,135.1875 696.2188,134.8281 Q696.4844,134.625 696.625,134.5625 Q696.7656,134.5 696.9375,134.5 Q697.2656,134.5 697.5,134.7656 Q697.75,135.0156 697.75,135.375 Q697.75,135.7188 697.4063,136.125 Q696.9063,136.7188 696.1094,137.0469 Q695.0625,137.5 693.7813,137.5 Q692.2813,137.5 691.0781,136.9063 Q690.1094,136.4375 689.4219,135.4219 Q688.75,134.4063 688.75,133.2031 L688.75,132.1094 Q688.75,130.8594 689.3438,129.7656 Q689.9531,128.6719 691,128.0938 Q692.0625,127.5 693.25,127.5 Q693.9688,127.5 694.5938,127.75 Q695.2188,128 695.75,128.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="59" x="714.25" y="136.9102">Algorithms</text><line style="stroke:#A80036;stroke-width:1.5;" x1="400.5" x2="1054.5" y1="148" y2="148"/><line style="stroke:#A80036;stroke-width:1.5;" x1="400.5" x2="1054.5" y1="156" y2="156"/><ellipse cx="410.5" cy="167" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="209" x="419.5" y="171.4189">BreadthFirstSearch(Graph&lt;V, E&gt; g, V vert)</text><ellipse cx="410.5" cy="180.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="389" x="419.5" y="185.2549">DepthFirstSearch(Graph&lt;V, E&gt; g, V vOrig, boolean[] visited, LinkedList&lt;V&gt; qdfs)</text><ellipse cx="410.5" cy="194.6719" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="199" x="419.5" y="199.0908">DepthFirstSearch(Graph&lt;V, E&gt; g, V vert)</text><ellipse cx="410.5" cy="208.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="544" x="419.5" y="212.9268">allPaths(Graph&lt;V, E&gt; g, V vOrig, V vDest, boolean[] visited,LinkedList&lt;V&gt; path, ArrayList&lt;LinkedList&lt;V&gt;&gt; paths)</text><ellipse cx="410.5" cy="222.3438" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="204" x="419.5" y="226.7627">allPaths(Graph&lt;V, E&gt; g, V vOrig, V vDest)</text><ellipse cx="410.5" cy="236.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="433" x="419.5" y="240.5986">shortestPathLength(Graph&lt;V, E&gt; g, V vOrig,boolean[] visited, int[] pathKeys, double[] dist)</text><ellipse cx="410.5" cy="250.0156" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="421" x="419.5" y="254.4346">getPath(Graph&lt;V, E&gt; g, V vOrig, V vDest, V[] verts, int[] pathKeys, LinkedList&lt;V&gt; path)</text><ellipse cx="410.5" cy="263.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="351" x="419.5" y="268.2705">shortestPath(Graph&lt;V, E&gt; g, V vOrig, V vDest, LinkedList&lt;V&gt; shortPath)</text><ellipse cx="410.5" cy="277.6875" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="472" x="419.5" y="282.1064">shortestPaths(Graph&lt;V, E&gt; g, V vOrig, ArrayList&lt;LinkedList&lt;V&gt;&gt; paths, ArrayList&lt;Double&gt; dists)</text><ellipse cx="410.5" cy="291.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="106" x="419.5" y="295.9424">revPath(List&lt;V&gt; path)</text><ellipse cx="410.5" cy="305.3594" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="538" x="419.5" y="309.7783">shortestPathUsingNplaces(Graph&lt;V, E&gt; g,  V vOrig, V vDest, LinkedList&lt;V&gt; Places, boolean sea, boolean land)</text><ellipse cx="410.5" cy="319.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="630" x="419.5" y="323.6143">function(Graph&lt;V, E&gt; g,  V current, V vDest, LinkedList&lt;V&gt; Places, LinkedList&lt;V&gt; Path, String [] color,  boolean sea, boolean land)</text><ellipse cx="410.5" cy="333.0313" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="347" x="419.5" y="337.4502">checkPlaces(Graph&lt;V, E&gt; g, LinkedList&lt;V&gt; Places, LinkedList&lt;V&gt; Path)</text><ellipse cx="410.5" cy="346.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="363" x="419.5" y="351.2861">validateRestrictions(V dest, V current, V vDest, boolean sea, boolean land)</text><ellipse cx="410.5" cy="360.7031" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="180" x="419.5" y="365.1221">pathfinder(Graph&lt;V, E&gt; g, V current)</text><ellipse cx="410.5" cy="374.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacing" textLength="486" x="419.5" y="378.958">dfsVisit(Graph&lt;V, E&gt; g, V current, String[] color, LinkedList&lt;V&gt; path,LinkedList&lt;V&gt; temppath, V orig)</text><!--MD5=[a7f59980d172bff981d587cfd3d813d6]
class RouteOfContainerUI--><rect fill="#FEFECE" filter="url(#f4mxz67s9uscn)" height="48" id="RouteOfContainerUI" style="stroke:#A80036;stroke-width:1.5;" width="143" x="114" y="7"/><ellipse cx="129" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#A80036;stroke-width:1.0;"/><path d="M131,19.5 Q131.2031,19 131.4375,18.75 Q131.6719,18.5 131.9375,18.5 Q132.4063,18.5 132.7031,18.7813 Q133,19.0625 133,19.7188 L133,21.2813 Q133,21.9375 132.7188,22.2188 Q132.4375,22.5 132,22.5 Q131.6094,22.5 131.3594,22.3281 Q131.1094,22.1563 131,21.7031 Q130.9531,21.3906 130.7813,21.2188 Q130.4688,20.8906 129.9063,20.7031 Q129.3438,20.5 128.7813,20.5 Q128.0781,20.5 127.4844,20.7813 Q126.9063,21.0625 126.4531,21.6875 Q126,22.3125 126,23.1719 L126,24.0938 Q126,25.125 126.8438,25.8125 Q127.6875,26.5 129.1875,26.5 Q130.0781,26.5 130.7031,26.2969 Q131.0625,26.1875 131.4688,25.8281 Q131.7344,25.625 131.875,25.5625 Q132.0156,25.5 132.1875,25.5 Q132.5156,25.5 132.75,25.7656 Q133,26.0156 133,26.375 Q133,26.7188 132.6563,27.125 Q132.1563,27.7188 131.3594,28.0469 Q130.3125,28.5 129.0313,28.5 Q127.5313,28.5 126.3281,27.9063 Q125.3594,27.4375 124.6719,26.4219 Q124,25.4063 124,24.2031 L124,23.1094 Q124,21.8594 124.5938,20.7656 Q125.2031,19.6719 126.25,19.0938 Q127.3125,18.5 128.5,18.5 Q129.2188,18.5 129.8438,18.75 Q130.4688,19 131,19.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacing" textLength="111" x="143" y="27.9102">RouteOfContainerUI</text><line style="stroke:#A80036;stroke-width:1.5;" x1="115" x2="256" y1="39" y2="39"/><line style="stroke:#A80036;stroke-width:1.5;" x1="115" x2="256" y1="47" y2="47"/><!--MD5=[b84d5628547fbbfff77ff5641371663d]
link RouteOfContainerUI to BetweennessCentrality--><path codeLine="136" d="M185.5,55.28 C185.5,88.09 185.5,148.96 185.5,193.84 " fill="none" id="RouteOfContainerUI-to-BetweennessCentrality" style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#A80036" points="185.5,198.96,189.5,189.96,185.5,193.96,181.5,189.96,185.5,198.96" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[29ee0a634bf42e01fb5da0b93a3a0d64]
link BetweennessCentrality to FreightNetworkStore--><path codeLine="137" d="M185.5,302.35 C185.5,369.11 185.5,486.59 185.5,561.65 " fill="none" id="BetweennessCentrality-to-FreightNetworkStore" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="185.5,566.98,189.5,557.98,185.5,561.98,181.5,557.98,185.5,566.98" style="stroke:#A80036;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="30" x="186.5" y="429.4951">Uses</text><!--MD5=[76a4cd061b50bc1e875501c78b136814]
reverse link Graph to MapGraph--><path codeLine="138" d="M638.08,818.05 C627.49,839.9 616.76,862.04 606.4,883.42 " fill="none" id="Graph-backto-MapGraph" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="631.91,814.72,646.93,799.78,644.51,820.83,631.91,814.72" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[9a57099d9ed295087640a62db4367a4d]
reverse link Graph to MatrixGraph--><path codeLine="139" d="M763.84,821.97 C766.47,835.58 769.11,849.28 771.72,862.81 " fill="none" id="Graph-backto-MatrixGraph" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="none" points="756.93,823.08,760.01,802.12,770.67,820.43,756.93,823.08" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[303b773fe002fbf644f1f030b5b0d447]
link BetweennessCentrality to Algorithms--><path codeLine="140" d="M364.14,250.5 C374.11,250.5 384.08,250.5 394.05,250.5 " fill="none" id="BetweennessCentrality-to-Algorithms" style="stroke:#A80036;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="#A80036" points="399.27,250.5,390.27,246.5,394.27,250.5,390.27,254.5,399.27,250.5" style="stroke:#A80036;stroke-width:1.0;"/><!--MD5=[327a73a24aba32618596f7ab30ba89bf]
link Algorithms to Graph--><path codeLine="142" d="M727.5,385.21 C727.5,408.66 727.5,433.36 727.5,457.71 " fill="none" id="Algorithms-to-Graph" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="727.5,462.9,731.5,453.9,727.5,457.9,723.5,453.9,727.5,462.9" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#000000" points="732.5,429,735.4389,419.9549,729.5611,419.9549,732.5,429" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="30" x="696.6328" y="406.9549">Uses</text><!--MD5=[b81c77be576bce0e54e5b9039b25ba38]
link MapGraph to MapVertex--><path codeLine="143" d="M531.5,1194.69 C531.5,1223.85 531.5,1254.09 531.5,1282.49 " fill="none" id="MapGraph-to-MapVertex" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#A80036" points="531.5,1287.77,535.5,1278.77,531.5,1282.77,527.5,1278.77,531.5,1287.77" style="stroke:#A80036;stroke-width:1.0;"/><polygon fill="#000000" points="536.5,1256.5,539.4389,1247.4549,533.5611,1247.4549,536.5,1256.5" style="stroke:#000000;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="30" x="500.7734" y="1216.1252">Uses</text><!--MD5=[228c0a418e346479bce24fd8d795382d]
@startuml
'https://plantuml.com/class-diagram

class PortsCentralityUI{


}
class FreightNetworkStore{
+ab
+mg
+setAb(MatrixGraph<Object, Double> ab)
+setMg(MapGraph<Object, Double> mg)
+getMg()
+getAb()

}

class BetweennessCentrality{

+BetweennessCentrality()
+computeBetweennessCentrality(int n)
+getAllPathsBetweenness(Object vert)
+checkListsEquals(LinkedList<Object> l1, List<LinkedList<Object>> l2)

}

Interface Graph{
    isDirected()
    numVertices()
    vertices()
    validVertex(vert)
    key(vert)
    vertex(key)
    vertex(p)
    adjVertices(vert)
    numEdges()
    edges()
    edge(vOrig, vDest)
    edge(vOrigKey, vDestKey)
    outDegree(vert)
    inDegree(vert)
    outgoingEdges(vert)
    incomingEdges(vert)
    boolean addVertex(vert)
    addEdge(vOrig, vDest, weight)
    removeVertex(vert)
    removeEdge(vOrig, vDest)
    clone()
 }

 class MapVertex{
    -element;
    -outVerts;

   +MapVertex(vert)

    +getElement()
    +addAdjVert(vAdj,  edge)

    +remAdjVert(vAdj)
    +getEdge(vAdj)
    +numAdjVerts()

    +getAllAdjVerts()

    +getAllOutEdges()
    +toString()

    }

   class MapGraph{
   -error
   -mapVertices
   +MapGraph(boolean directed)
   +MapGraph(Graph<V,E> g)
   +validVertex(V vert)
   +adjVertices(V vert)
   +edges()
   +edge(V vOrig, V vDest)
   +edge(int vOrigKey, int vDestKey)
   +outDegree(V vert)
   +inDegree(V vert)
   +outgoingEdges(V vert)
   +incomingEdges(V vert)
   +addVertex(V vert)
   + addEdge(V vOrig, V vDest, E weight)
   + removeVertex(V vert)
   + removeEdge(V vOrig, V vDest)
   + clone()
   + toString()

   }
class MatrixGraph{
+INITIAL_CAPACITY
+RESIZE_FACTOR
+MatrixGraph(boolean directed, int initialCapacity)
+MatrixGraph(boolean directed)
+MatrixGraph(Graph<V,E> g)
+MatrixGraph(boolean directed, List <V> vs, E [][] m)
+adjVertices(V vert)
+edges()
+edge(V vOrig, V vDest)
+edge(int vOrigKey, int vDestKey)
+outDegree(V vert)
+inDegree(V vert)
+outgoingEdges(V vert)
+incomingEdges(V vert)
+addVertex(V vert)
+resizeMatrix()
+addEdge(V vOrig, V vDest, E weight)
+removeVertex(V vert)
+removeEdge(int vOrigKey, int vDestKey)
+removeEdge(V vOrig, V vDest)
+clone()
+toString()

}
class Algorithms{
+BreadthFirstSearch(Graph<V, E> g, V vert)
+DepthFirstSearch(Graph<V, E> g, V vOrig, boolean[] visited, LinkedList<V> qdfs)
+DepthFirstSearch(Graph<V, E> g, V vert)
+allPaths(Graph<V, E> g, V vOrig, V vDest, boolean[] visited,LinkedList<V> path, ArrayList<LinkedList<V>> paths)
+allPaths(Graph<V, E> g, V vOrig, V vDest)
+shortestPathLength(Graph<V, E> g, V vOrig,boolean[] visited, int[] pathKeys, double[] dist)
+getPath(Graph<V, E> g, V vOrig, V vDest, V[] verts, int[] pathKeys, LinkedList<V> path)
+shortestPath(Graph<V, E> g, V vOrig, V vDest, LinkedList<V> shortPath)
+shortestPaths(Graph<V, E> g, V vOrig, ArrayList<LinkedList<V>> paths, ArrayList<Double> dists)
+revPath(List<V> path)
+shortestPathUsingNplaces(Graph<V, E> g,  V vOrig, V vDest, LinkedList<V> Places, boolean sea, boolean land)
+function(Graph<V, E> g,  V current, V vDest, LinkedList<V> Places, LinkedList<V> Path, String [] color,  boolean sea, boolean land)
+checkPlaces(Graph<V, E> g, LinkedList<V> Places, LinkedList<V> Path)
+validateRestrictions(V dest, V current, V vDest, boolean sea, boolean land)
+pathfinder(Graph<V, E> g, V current)
+dfsVisit(Graph<V, E> g, V current, String[] color, LinkedList<V> path,LinkedList<V> temppath, V orig)
}

RouteOfContainerUI  ..>  BetweennessCentrality
BetweennessCentrality - -> FreightNetworkStore: "Uses"
Graph <|- - MapGraph
Graph <|- - MatrixGraph
BetweennessCentrality .> Algorithms

Algorithms - -> Graph: "Uses" >
MapGraph - -> MapVertex: "Uses" >

@enduml

@startuml

class PortsCentralityUI{


}
class FreightNetworkStore{
+ab
+mg
+setAb(MatrixGraph<Object, Double> ab)
+setMg(MapGraph<Object, Double> mg)
+getMg()
+getAb()

}

class BetweennessCentrality{

+BetweennessCentrality()
+computeBetweennessCentrality(int n)
+getAllPathsBetweenness(Object vert)
+checkListsEquals(LinkedList<Object> l1, List<LinkedList<Object>> l2)

}

Interface Graph{
    isDirected()
    numVertices()
    vertices()
    validVertex(vert)
    key(vert)
    vertex(key)
    vertex(p)
    adjVertices(vert)
    numEdges()
    edges()
    edge(vOrig, vDest)
    edge(vOrigKey, vDestKey)
    outDegree(vert)
    inDegree(vert)
    outgoingEdges(vert)
    incomingEdges(vert)
    boolean addVertex(vert)
    addEdge(vOrig, vDest, weight)
    removeVertex(vert)
    removeEdge(vOrig, vDest)
    clone()
 }

 class MapVertex{
    -element;
    -outVerts;

   +MapVertex(vert)

    +getElement()
    +addAdjVert(vAdj,  edge)

    +remAdjVert(vAdj)
    +getEdge(vAdj)
    +numAdjVerts()

    +getAllAdjVerts()

    +getAllOutEdges()
    +toString()

    }

   class MapGraph{
   -error
   -mapVertices
   +MapGraph(boolean directed)
   +MapGraph(Graph<V,E> g)
   +validVertex(V vert)
   +adjVertices(V vert)
   +edges()
   +edge(V vOrig, V vDest)
   +edge(int vOrigKey, int vDestKey)
   +outDegree(V vert)
   +inDegree(V vert)
   +outgoingEdges(V vert)
   +incomingEdges(V vert)
   +addVertex(V vert)
   + addEdge(V vOrig, V vDest, E weight)
   + removeVertex(V vert)
   + removeEdge(V vOrig, V vDest)
   + clone()
   + toString()

   }
class MatrixGraph{
+INITIAL_CAPACITY
+RESIZE_FACTOR
+MatrixGraph(boolean directed, int initialCapacity)
+MatrixGraph(boolean directed)
+MatrixGraph(Graph<V,E> g)
+MatrixGraph(boolean directed, List <V> vs, E [][] m)
+adjVertices(V vert)
+edges()
+edge(V vOrig, V vDest)
+edge(int vOrigKey, int vDestKey)
+outDegree(V vert)
+inDegree(V vert)
+outgoingEdges(V vert)
+incomingEdges(V vert)
+addVertex(V vert)
+resizeMatrix()
+addEdge(V vOrig, V vDest, E weight)
+removeVertex(V vert)
+removeEdge(int vOrigKey, int vDestKey)
+removeEdge(V vOrig, V vDest)
+clone()
+toString()

}
class Algorithms{
+BreadthFirstSearch(Graph<V, E> g, V vert)
+DepthFirstSearch(Graph<V, E> g, V vOrig, boolean[] visited, LinkedList<V> qdfs)
+DepthFirstSearch(Graph<V, E> g, V vert)
+allPaths(Graph<V, E> g, V vOrig, V vDest, boolean[] visited,LinkedList<V> path, ArrayList<LinkedList<V>> paths)
+allPaths(Graph<V, E> g, V vOrig, V vDest)
+shortestPathLength(Graph<V, E> g, V vOrig,boolean[] visited, int[] pathKeys, double[] dist)
+getPath(Graph<V, E> g, V vOrig, V vDest, V[] verts, int[] pathKeys, LinkedList<V> path)
+shortestPath(Graph<V, E> g, V vOrig, V vDest, LinkedList<V> shortPath)
+shortestPaths(Graph<V, E> g, V vOrig, ArrayList<LinkedList<V>> paths, ArrayList<Double> dists)
+revPath(List<V> path)
+shortestPathUsingNplaces(Graph<V, E> g,  V vOrig, V vDest, LinkedList<V> Places, boolean sea, boolean land)
+function(Graph<V, E> g,  V current, V vDest, LinkedList<V> Places, LinkedList<V> Path, String [] color,  boolean sea, boolean land)
+checkPlaces(Graph<V, E> g, LinkedList<V> Places, LinkedList<V> Path)
+validateRestrictions(V dest, V current, V vDest, boolean sea, boolean land)
+pathfinder(Graph<V, E> g, V current)
+dfsVisit(Graph<V, E> g, V current, String[] color, LinkedList<V> path,LinkedList<V> temppath, V orig)
}

RouteOfContainerUI  ..>  BetweennessCentrality
BetweennessCentrality - -> FreightNetworkStore: "Uses"
Graph <|- - MapGraph
Graph <|- - MatrixGraph
BetweennessCentrality .> Algorithms

Algorithms - -> Graph: "Uses" >
MapGraph - -> MapVertex: "Uses" >

@enduml

PlantUML version 1.2021.11(Sat Oct 02 14:26:11 BST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: pt
Country: PT
--></g></svg>