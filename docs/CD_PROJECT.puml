@startuml
'https://plantuml.com/class-diagram



class ShipStore{
-shipList;
    -bstMMSI;
    -bstIMO;
    -bstCallSign;
 + ShipStore()
  + getBstMMSI()
  + getBstIMO()
   + getBstCallSign()
    + getShipList()
     + checkDuplicatedData( ship)
     + addShip( ship)
     + containsMMSI(MMSI)
      + containsIMO(IMO)
       + containsCallSign(callSign)
       + Ship getShip(code)
       + shipSummary(code)
    +  getTopNShips(n, start, end)
    + getPairsOfShips()
     -MMSIOrder (map)
     - TravelDistOrder (map)
}
enum ShipSummary {
 CODE
 VESSEL_NAME
 START_BASE_DATE_TIME
 END_BASE_DATE_TIME
 TOTAL_MOVEMENT_TIME
    TOTAL_NUMBER_MOVEMENTS
    MAX_SOG
    MAX_COG
    MEAN_SOG
    MEAN_COG
    DEPARTURE_LATITUDE
    DEPARTURE_LONGITUDE
    ARRIVAL_LATITUDE
    ARRIVAL_LONGITUDE
    TRAVELED_DISTANCE
    DELTA_DISTANCE
}
class App{
-bootstrap()
- singleton
- company;
- authFacade;
-App()
+  getCompany()
+  getCurrentUserSession()
 + doLogin(email, pwd)
 + doLogout()
}
class MovementsController {
+ MovementsController()
+ getData()
-company;
    - shipStore;
    - shipList;

}
class PositionController {
- shipStore;
 - shipStore
 + PositionController()
 + DatePosition (Date, Hour, s)
 + PeriodPosition(Date, Hour, Date1, Hour1, s)
 - dateTime(Date)
 -checkDate(date)
 -checkHour(hour)
 -checkPeriod( Date, Date1)
}
 class ShipController{
 -company;
     -bstMMSI;
     -bstIMO;
     -bstCallSign;
     -List<Ship> ships;
     -ShipStore shipStore;
 + ShipController()
 + importShips(file)
 + getDetails(code)
 + getFiles()
 + getShips()
  + getTopNShips(n, start, end)
 + getPairsOfShips()
 }
 class ShipSummaryController{
  -shipStore;
  + ShipSummaryController()
  + shipSummary(code)

 }
 class Message{

 -latitude;
     -longitude;
     -sog;
     -cog;
     -heading;
     -transceiver;
     -localDateTime;
      + Message(localDateTime, latitude, longitude, sog, cog, heading, transceiver)
 + getLocalDateTime()
 + getCog()
  + getHeading()
  + getLatitude()
  + getLongitude()
  + getSog()
  + getTransceiver()
   + compareTo(Object o)
 }
 class Ship {
     -MMSI;
     -name;
     -IMO;
     -energyGenerators;
     -powerOutput;
     -callsign;
     -vesselType;
     -length;
     -width;
     -capacity;
     -draft;
     -messages
      + Ship(MMSI, name, IMO, callsign, vesselType, length, width, draft, capacity)
     + addMessage(Message message)
     + getWidth()
     + getCapacity()
      + getDetails()
    + getDraft()
    + getLength()
     + getIMO()
      + getMMSI()
      + getCallsign()
     + getName()
     + getVesselType()
      + setCallsign(callsign)
      + setCapacity(capacity)
       + setDraft(draft)
        + setIMO(IMO)
         + setLength(length)
         + setMMSI(MMSI)
         + setName(name)
         + setVesselType(vesselType)
         + setWidth(width)
         + checkMMSI(MMSI)
          + checkName(name)
          + checkIMO(IMO)
           + checkVesselType(vesselType)
            + checkLength(length)
            + checkWidth(width)
             + checkCapacity(cap)
              + getAllMessages()
     }
      class OrganizationRoleStore {
      -roles
       + OrganizationRoleStore()
        -addUserRolesToSystem()
        + getRoles()
      }
      class BST {
      + root;
          + lastReturnedNode;
+  search( key)
-less(k1, k2)
 -equals(k1, k2)
 - Object search(h, key)
 public void put(key, value)

  - insert( h, key,  value)
      }
    class Node {
               key;
               value;
               left
                right
              Node( key,  value)
          }
    class DistanceBetweenCoodinates{
     + distanceBetweenCoordinates(lat1, lon1, lat2 , lon2)
- toRad(value)
- void validateValues(lat1, lon1, lat2, lon2)


    }
     class MovementSortingTotalMovements{
     -shipStore
     +MovementSortingTotalMovements()
      +compare( o1, o2)
      }
      class MovementSortingTravelDistance{

           -shipStore
+MovementSortingTravelDistance
      +compare( o1, o2)


      }
class Company {
-shipStore
-authFacade
+Company()
+getShipStore()
+getAuthFacade()




}
class FreightNetworkController{
-matrix
-vertices
+getCountries()
 + getDistanceBetweenPortCapital(Port port, Country country)
 +  getDistanceBetweenCapitals(Country c1, Country c2)
 +  indexOfObject(List<Object> vertices, Object o)
+ getVertices()
+  insertInMatrix( vertices,  matrix,  n)
+  build(int n)
 +  shortestPathBetweenVertices( l,  place1,  place2) {
 +   print( puzzle,  vertices)
  +  getVertByName( name)
  +  connectPortToCountryPorts( port,  matrix,  vertices){
 +  connectPortToNClosestPorts( port,  matrix, vertices,  n){
   + getMatrix()
}
class ColorMapController{
    +colorMap(n,timeDebugVerbose)
    - printDebuginfo(isdebuging, text)
}
Ship "1" --> "*" Message: contains
ShipSummaryController ..> ShipStore
ShipController ..> ShipStore
PositionController ..> ShipStore
MovementsController ..> ShipStore
ShipStore ..> ShipSummary
Ship "*" --> "1" BST : stored in
ShipSummaryController ..> Company
ShipController ..> Company
PositionController ..> Company
MovementsController ..> Company
Company "1" --> "1" ShipStore : knows
ShipStore"1" ..> "*" Ship: contains
ShipSummaryController ..> DistanceBetweenCoodinates
BST "*" --> "1" Node : Uses
ShipStore ..> MovementSortingTotalMovements : sorted by
ShipStore ..> MovementSortingTravelDistance : sorted by
App ..> ShipController
App ..> OrganizationRoleStore
App ..> PositionController
App ..> MovementsController
App ..> ShipSummaryController
App  ..>ColorMapController
App ..> FreightNetworkController




@enduml