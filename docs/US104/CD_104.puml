@startuml
'https://plantuml.com/class-diagram

class ShipSummaryController{
  -shipStore;
  + ShipSummaryController()
  + shipSummary(code)

 }
 class DistanceBetweenCoodinates{
     + distanceBetweenCoordinates(lat1, lon1, lat2 , lon2)
- toRad(value)
- void validateValues(lat1, lon1, lat2, lon2)


    }

class ShipStore{
-shipList;
-bstMMSI;
-bstIMO;
-bstCallSign;
+ ShipStore()
+ getBstMMSI()
+ getBstIMO()
+ getBstCallSign()
+ getShipList()
+ checkDuplicatedData( ship)
+ addShip( ship)
+ containsMMSI(MMSI)
+ containsIMO(IMO)
+ containsCallSign(callSign)
+ Ship getShip(code)
+ shipSummary(code)
+  getTopNShips(n, start, end)
+ getPairsOfShips()
-MMSIOrder (map)
- TravelDistOrder (map)
}
class Company {
-shipStore
-authFacade
+Company()
+getShipStore()
+getAuthFacade()
}
 class Ship {
     -MMSI;
     -name;
     -IMO;
     -energyGenerators;
     -powerOutput;
     -callsign;
     -vesselType;
     -length;
     -width;
     -capacity;
     -draft;
     -messages
      + Ship(MMSI, name, IMO, callsign, vesselType, length, width, draft, capacity)
     + addMessage(Message message)
     + getWidth()
     + getCapacity()
      + getDetails()
    + getDraft()
    + getLength()
     + getIMO()
      + getMMSI()
      + getCallsign()
     + getName()
     + getVesselType()
      + setCallsign(callsign)
      + setCapacity(capacity)
       + setDraft(draft)
        + setIMO(IMO)
         + setLength(length)
         + setMMSI(MMSI)
         + setName(name)
         + setVesselType(vesselType)
         + setWidth(width)
         + checkMMSI(MMSI)
          + checkName(name)
          + checkIMO(IMO)
           + checkVesselType(vesselType)
            + checkLength(length)
            + checkWidth(width)
             + checkCapacity(cap)
              + getAllMessages()
     }
      class Message{

      -latitude;
          -longitude;
          -sog;
          -cog;
          -heading;
          -transceiver;
          -localDateTime;
           + Message(localDateTime, latitude, longitude, sog, cog, heading, transceiver)
      + getLocalDateTime()
      + getCog()
       + getHeading()
       + getLatitude()
       + getLongitude()
       + getSog()
       + getTransceiver()
        + compareTo(Object o)
      }
class DistanceBetweenCoodinates{
+ distanceBetweenCoordinates(lat1, lon1, lat2 , lon2)
- toRad(value)
- void validateValues(lat1, lon1, lat2, lon2)


    }
enum ShipSummary {
 CODE
 VESSEL_NAME
 START_BASE_DATE_TIME
 END_BASE_DATE_TIME
 TOTAL_MOVEMENT_TIME
    TOTAL_NUMBER_MOVEMENTS
    MAX_SOG
    MAX_COG
    MEAN_SOG
    MEAN_COG
    DEPARTURE_LATITUDE
    DEPARTURE_LONGITUDE
    ARRIVAL_LATITUDE
    ARRIVAL_LONGITUDE
    TRAVELED_DISTANCE
    DELTA_DISTANCE
}
Ship "1" --> "*" Message: contains
ShipSummaryController ..> Company
ShipSummaryController ..> DistanceBetweenCoodinates
ShipStore"1" ..> "*" Ship: contains

ShipSummaryController ..> ShipStore
ShipStore ..> ShipSummary
@enduml